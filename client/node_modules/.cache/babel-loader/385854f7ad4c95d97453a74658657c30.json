{"ast":null,"code":"import axios from 'axios';\nexport const FETCH_USERS_START = 'FETCH_USERS';\nexport const FETCH_USERS_SUCCESS = 'FETCH_USERS_SUCCESS';\nexport const FETCH_USERS_FAILURE = 'FETCH_USERS_FAILURE';\nexport const CREATE_USER_START = 'CREATE_USER';\nexport const ADD_USER = 'ADD_USER';\nexport const ADD_USER_SUCCESS = 'ADD_USER_SUCCESS';\nexport const ADD_USER_FAILURE = 'ADD_USER_FAILURE';\nexport const UPDATED_USER_SUCCESS = 'UPDATE_USER_SUCCESS';\nexport const UPDATED_USER_FAILURE = 'UPDATE_USER_FAILURE';\nexport const getUsers = () => dispatch => {\n  dispatch({\n    type: FETCH_USERS_START\n  });\n  axios.get(\"https://usemytechstuff.herokuapp.com/api/users\", {\n    headers: {\n      Authorization: localStorage.getItem(\"token\")\n    }\n  }).then(res => {\n    dispatch({\n      type: FETCH_USERS_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    console.log(err.response);\n    dispatch({\n      type: FETCH_USERS_FAILURE,\n      payload: err\n    });\n  });\n};\nexport const addUser = newUser => dispatch => {\n  dispatch({\n    type: CREATE_USER_START\n  });\n  axios.post('https://usemytechstuff.herokuapp.com/api/auth/register', newUser).then(res => {\n    dispatch({\n      type: ADD_USER_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    console.log(err);\n    dispatch({\n      type: ADD_USER_FAILURE,\n      payload: err\n    });\n  });\n};\nexport const updateUser = updatedUser => dispatch => {\n  dispatch({\n    type: UPDATED_USER_SUCCESS\n  });\n  axios.put(\"https://usemytechstuff.herokuapp.com/api/users/\".concat(updatedUser.id), updatedUser).then(res => {\n    this.setState({\n      users: res.data\n    });\n    console.log(res);\n    this.props.history.push('/users');\n  }).catch(err => {\n    console.log(err);\n    dispatch({\n      type: UPDATED_USER_FAILURE,\n      payload: err\n    });\n  }); // setActiveUser = user => {\n  //   this.setState({ activeUser: user });\n  // };\n};","map":{"version":3,"sources":["/Users/skutz/Documents/GitHub/UseMyTechStuff_FrontEnd/client/src/actions/SignUp.js"],"names":["axios","FETCH_USERS_START","FETCH_USERS_SUCCESS","FETCH_USERS_FAILURE","CREATE_USER_START","ADD_USER","ADD_USER_SUCCESS","ADD_USER_FAILURE","UPDATED_USER_SUCCESS","UPDATED_USER_FAILURE","getUsers","dispatch","type","get","headers","Authorization","localStorage","getItem","then","res","payload","data","catch","err","console","log","response","addUser","newUser","post","updateUser","updatedUser","put","id","setState","users","props","history","push"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,iBAAiB,GAAG,aAA1B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,iBAAiB,GAAG,aAA1B;AACP,OAAO,MAAMC,QAAQ,GAAG,UAAjB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,oBAAoB,GAAG,qBAA7B;AACP,OAAO,MAAMC,oBAAoB,GAAG,qBAA7B;AAGP,OAAO,MAAMC,QAAQ,GAAG,MAAMC,QAAQ,IAAI;AACxCA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEX;AAAR,GAAD,CAAR;AACAD,EAAAA,KAAK,CACFa,GADH,mDAEI;AAAEC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,aAAa,EAAEC,YAAY,CAACC,OAAb,CAAqB,OAArB;AAAjB;AAAX,GAFJ,EAIGC,IAJH,CAIQC,GAAG,IAAI;AACXR,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEV,mBADC;AAEPkB,MAAAA,OAAO,EAAED,GAAG,CAACE;AAFN,KAAD,CAAR;AAID,GATH,EAUGC,KAVH,CAUSC,GAAG,IAAI;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,QAAhB;AACAf,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAET,mBAAR;AAA6BiB,MAAAA,OAAO,EAAEG;AAAtC,KAAD,CAAR;AACD,GAbH;AAcD,CAhBM;AAkBP,OAAO,MAAMI,OAAO,GAAGC,OAAO,IAAIjB,QAAQ,IAAI;AAC5CA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAER;AAAR,GAAD,CAAR;AACAJ,EAAAA,KAAK,CACF6B,IADH,CACQ,wDADR,EACkED,OADlE,EAEGV,IAFH,CAEQC,GAAG,IAAI;AACXR,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEN,gBAAR;AAA0Bc,MAAAA,OAAO,EAAED,GAAG,CAACE;AAAvC,KAAD,CAAR;AACD,GAJH,EAKGC,KALH,CAKSC,GAAG,IAAI;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAZ,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEL,gBAAR;AAA0Ba,MAAAA,OAAO,EAAEG;AAAnC,KAAD,CAAR;AACD,GARH;AASD,CAXM;AAaP,OAAO,MAAMO,UAAU,GAAGC,WAAW,IAAIpB,QAAQ,IAAI;AACnDA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEJ;AAAR,GAAD,CAAR;AACAR,EAAAA,KAAK,CACFgC,GADH,0DACyDD,WAAW,CAACE,EADrE,GAC2EF,WAD3E,EAEGb,IAFH,CAEQC,GAAG,IAAI;AACX,SAAKe,QAAL,CAAc;AAAEC,MAAAA,KAAK,EAAEhB,GAAG,CAACE;AAAb,KAAd;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYN,GAAZ;AACA,SAAKiB,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,QAAxB;AACD,GANH,EAOGhB,KAPH,CAOSC,GAAG,IAAI;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAZ,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEH,oBAAR;AAA8BW,MAAAA,OAAO,EAAEG;AAAvC,KAAD,CAAR;AACD,GAVH,EAFmD,CAcnD;AACA;AACA;AACD,CAjBM","sourcesContent":["import axios from 'axios';\n\nexport const FETCH_USERS_START = 'FETCH_USERS';\nexport const FETCH_USERS_SUCCESS = 'FETCH_USERS_SUCCESS';\nexport const FETCH_USERS_FAILURE = 'FETCH_USERS_FAILURE';\nexport const CREATE_USER_START = 'CREATE_USER';\nexport const ADD_USER = 'ADD_USER';\nexport const ADD_USER_SUCCESS = 'ADD_USER_SUCCESS';\nexport const ADD_USER_FAILURE = 'ADD_USER_FAILURE';\nexport const UPDATED_USER_SUCCESS = 'UPDATE_USER_SUCCESS';\nexport const UPDATED_USER_FAILURE = 'UPDATE_USER_FAILURE';\n\n\nexport const getUsers = () => dispatch => {\n  dispatch({ type: FETCH_USERS_START });\n  axios\n    .get(`https://usemytechstuff.herokuapp.com/api/users`,\n      { headers: { Authorization: localStorage.getItem(\"token\") } }\n    )\n    .then(res => {\n      dispatch({\n        type: FETCH_USERS_SUCCESS,\n        payload: res.data\n      });\n    })\n    .catch(err => {\n      console.log(err.response);\n      dispatch({ type: FETCH_USERS_FAILURE, payload: err });\n    });\n};\n\nexport const addUser = newUser => dispatch => {\n  dispatch({ type: CREATE_USER_START });\n  axios\n    .post('https://usemytechstuff.herokuapp.com/api/auth/register', newUser)\n    .then(res => {\n      dispatch({ type: ADD_USER_SUCCESS, payload: res.data });\n    })\n    .catch(err => {\n      console.log(err);\n      dispatch({ type: ADD_USER_FAILURE, payload: err });\n    });\n}\n\nexport const updateUser = updatedUser => dispatch => {\n  dispatch({ type: UPDATED_USER_SUCCESS });\n  axios\n    .put(`https://usemytechstuff.herokuapp.com/api/users/${updatedUser.id}`, updatedUser)\n    .then(res => {\n      this.setState({ users: res.data });\n      console.log(res);\n      this.props.history.push('/users');\n    })\n    .catch(err => {\n      console.log(err);\n      dispatch({ type: UPDATED_USER_FAILURE, payload: err });\n    });\n\n  // setActiveUser = user => {\n  //   this.setState({ activeUser: user });\n  // };\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}