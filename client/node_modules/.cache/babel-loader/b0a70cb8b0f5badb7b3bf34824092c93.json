{"ast":null,"code":"import _objectSpread from \"/Users/skutz/Documents/GitHub/UseMyTechStuff_FrontEnd/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/skutz/Documents/GitHub/UseMyTechStuff_FrontEnd/client/src/components/Login.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Loader from \"react-loader-spinner\";\nimport { login } from '../actions';\n\nclass Login extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      credentials: {\n        username: \"\",\n        password: \"\"\n      }\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        credentials: _objectSpread({}, this.state.credentials, {\n          [e.target.name]: e.target.value\n        })\n      });\n    };\n\n    this.handleLogin = e => {\n      e.preventDefault();\n      const _this$state$credentia = this.state.credentials,\n            username = _this$state$credentia.username,\n            password = _this$state$credentia.password;\n\n      if (username && password) {\n        this.props.login(this.state.credentials) //credentials returned\n        // history updated\n        .then(() => this.props.history.push(\"/protected\"));\n      } else {\n        localStorage.removeItem(\"token\");\n        localStorage.removeItem(\"user_id\");\n        localStorage.removeItem(\"username\");\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleLogin,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"Account\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"username\",\n      placeholder: \"username\",\n      value: this.state.credentials.username,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"Password\"), React.createElement(\"input\", {\n      type: \"password\",\n      name: \"password\",\n      placeholder: \"********\",\n      value: this.state.credentials.password,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, this.props.isLoggingIn ? React.createElement(Loader, {\n      className: \"section\",\n      type: \"ThreeDots\",\n      color: \"blue\",\n      height: \"60\",\n      width: \"80\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }) : \"Log in\")));\n  }\n\n}\n/*\nconst mapStateToProps = state => {\n  return {\n    isLoggingIn: state.isLoggingIn,\n    username: state.credentials.username,\n\n  };\n};\n*/\n\n\nconst mapStateToProps = ({\n  isLoggingIn,\n  username\n}) => ({\n  isLoggingIn,\n  username\n});\n\nexport default connect(mapStateToProps, {\n  login\n})(Login);","map":{"version":3,"sources":["/Users/skutz/Documents/GitHub/UseMyTechStuff_FrontEnd/client/src/components/Login.js"],"names":["React","connect","Loader","login","Login","Component","state","credentials","username","password","handleChange","e","setState","target","name","value","handleLogin","preventDefault","props","then","history","push","localStorage","removeItem","render","isLoggingIn","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport Loader from \"react-loader-spinner\";\nimport { login } from '../actions';\n\nclass Login extends React.Component {\n  state = {\n    credentials: {\n      username: \"\",\n      password: \"\"\n    }\n  };\n\n  handleChange = e => {\n    this.setState({\n      credentials: {\n        ...this.state.credentials,\n        [e.target.name]: e.target.value\n      }\n    });\n  };\n\n  handleLogin = e => {\n    e.preventDefault();\n    const { username, password } = this.state.credentials;\n\n    if (username && password) {\n\n      this.props\n        .login(this.state.credentials) //credentials returned\n        // history updated\n        .then(() => this.props.history.push(\"/protected\"));\n    } else {\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"user_id\");\n      localStorage.removeItem(\"username\");\n    }\n\n  };\n\n  render() {\n    return (\n      <div>\n\n        <form onSubmit={this.handleLogin}>\n          <label htmlFor=\"username\">Account</label>\n          <input\n            type=\"text\"\n            name=\"username\"\n            placeholder=\"username\"\n            value={this.state.credentials.username}\n            onChange={this.handleChange}\n          />\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"********\"\n            value={this.state.credentials.password}\n            onChange={this.handleChange}\n          />\n          <button>\n            {this.props.isLoggingIn ?\n              <Loader className=\"section\" type=\"ThreeDots\" color=\"blue\" height=\"60\" width=\"80\" />\n              :\n              \"Log in\"\n            }\n          </button>\n\n\n\n        </form>\n      </div>\n    );\n  }\n}\n\n/*\nconst mapStateToProps = state => {\n  return {\n    isLoggingIn: state.isLoggingIn,\n    username: state.credentials.username,\n\n  };\n};\n*/\n\n\nconst mapStateToProps = ({ isLoggingIn, username }) => ({\n  isLoggingIn,\n  username,\n\n});\n\n\n\nexport default connect(\n  mapStateToProps,\n  { login }\n)(Login);\n"]},"metadata":{},"sourceType":"module"}