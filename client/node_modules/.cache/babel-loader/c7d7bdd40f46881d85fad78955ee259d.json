{"ast":null,"code":"import axios from 'axios';\nexport const LOGIN_START = 'LOGIN_START';\nexport const LOGIN_RESOLVED = \"LOGIN_RESOLVED\"; // create action types for getting data\n\nexport const FETCH_DATA_START = \"FETCH_DATA_START\";\nexport const FETCH_DATA_SUCCESS = \"FETCH_DATA_SUCCESS\"; // generic action type for any error\n\nexport const ERROR = \"ERROR\";\nexport const login = creds => dispatch => {\n  dispatch({\n    type: LOGIN_START\n  });\n  return axios // we post login creds to login server\n  .post(\"https://usemytechstuff.herokuapp.com/api/auth/login\", creds).then(res => {\n    // local storage stores token passed in\n    console.log('response.data is >> ', res.data); //    localStorage.setItem(\"token\", res.data.payload);\n\n    localStorage.setItem('token', res.data.token); // added\n\n    localStorage.setItem('user_id', res.data.user_id); // added\n\n    localStorage.setItem('username', res.data.username); // Just added , not showing up !!!\n\n    dispatch({\n      type: LOGIN_RESOLVED,\n      payload: res.data\n    });\n  }).catch(err => {\n    console.log(\"login err: \", err);\n\n    if (err.response.status === 403) {\n      localStorage.removeItem(\"token\"); //     localStorage.removeItem(\"user_id\");\n    } //    dispatch({ type: LOGIN_RESOLVED });\n\n\n    dispatch({\n      type: ERROR\n    }); // JUST added\n  });\n};\nexport const getTech = () => dispatch => {\n  dispatch({\n    type: FETCH_DATA_START\n  });\n  axios // NOTICE DIFFERENT ENDPOINT !!!!!\n  .get(\"https://usemytechstuff.herokuapp.com/api/tech\", {\n    headers: {\n      Authorization: localStorage.getItem(\"token\")\n    }\n  }).then(res => {\n    console.log(\" >>>>this is res  \", res);\n    dispatch({\n      type: FETCH_DATA_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    console.log(err.response);\n\n    if (err.response.status === 403) {\n      localStorage.removeItem(\"token\");\n    }\n\n    dispatch({\n      type: ERROR,\n      payload: err.response\n    });\n  });\n};","map":{"version":3,"sources":["/Users/skutz/Documents/GitHub/UseMyTechStuff_FrontEnd/client/src/actions/index.js"],"names":["axios","LOGIN_START","LOGIN_RESOLVED","FETCH_DATA_START","FETCH_DATA_SUCCESS","ERROR","login","creds","dispatch","type","post","then","res","console","log","data","localStorage","setItem","token","user_id","username","payload","catch","err","response","status","removeItem","getTech","get","headers","Authorization","getItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB,C,CAEP;;AACA,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B,C,CAEP;;AACA,OAAO,MAAMC,KAAK,GAAG,OAAd;AAEP,OAAO,MAAMC,KAAK,GAAGC,KAAK,IAAIC,QAAQ,IAAI;AACxCA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAER;AAAR,GAAD,CAAR;AAEA,SAAOD,KAAK,CAAC;AAAD,GACTU,IADI,wDACwDH,KADxD,EAEJI,IAFI,CAECC,GAAG,IAAI;AACX;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,GAAG,CAACG,IAAxC,EAFW,CAGX;;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BL,GAAG,CAACG,IAAJ,CAASG,KAAvC,EAJW,CAI2C;;AACtDF,IAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgCL,GAAG,CAACG,IAAJ,CAASI,OAAzC,EALW,CAK2C;;AACtDH,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCL,GAAG,CAACG,IAAJ,CAASK,QAA1C,EANW,CAM6C;;AACxDZ,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAEP,cAAP;AAAuBmB,MAAAA,OAAO,EAAET,GAAG,CAACG;AAApC,KAAD,CAAR;AACD,GAVI,EAWJO,KAXI,CAWEC,GAAG,IAAI;AACZV,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BS,GAA3B;;AACA,QAAIA,GAAG,CAACC,QAAJ,CAAaC,MAAb,KAAwB,GAA5B,EAAiC;AAC/BT,MAAAA,YAAY,CAACU,UAAb,CAAwB,OAAxB,EAD+B,CAE/B;AACD,KALW,CAMZ;;;AACAlB,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEJ;AAAR,KAAD,CAAR,CAPY,CAOqC;AAClD,GAnBI,CAAP;AAoBD,CAvBM;AAyBP,OAAO,MAAMsB,OAAO,GAAG,MAAMnB,QAAQ,IAAI;AACvCA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEN;AAAR,GAAD,CAAR;AACAH,EAAAA,KAAK,CAAC;AAAD,GACF4B,GADH,kDAEI;AAAEC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,aAAa,EAAEd,YAAY,CAACe,OAAb,CAAqB,OAArB;AAAjB;AAAX,GAFJ,EAGGpB,IAHH,CAGQC,GAAG,IAAI;AACXC,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCF,GAAlC;AACAJ,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEL,kBADC;AAEPiB,MAAAA,OAAO,EAAET,GAAG,CAACG;AAFN,KAAD,CAAR;AAID,GATH,EAUGO,KAVH,CAUSC,GAAG,IAAI;AACZV,IAAAA,OAAO,CAACC,GAAR,CAAYS,GAAG,CAACC,QAAhB;;AACA,QAAID,GAAG,CAACC,QAAJ,CAAaC,MAAb,KAAwB,GAA5B,EAAiC;AAC/BT,MAAAA,YAAY,CAACU,UAAb,CAAwB,OAAxB;AACD;;AACDlB,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEJ,KAAR;AAAegB,MAAAA,OAAO,EAAEE,GAAG,CAACC;AAA5B,KAAD,CAAR;AACD,GAhBH;AAiBD,CAnBM","sourcesContent":["import axios from 'axios';\n\nexport const LOGIN_START = 'LOGIN_START';\nexport const LOGIN_RESOLVED = \"LOGIN_RESOLVED\";\n\n// create action types for getting data\nexport const FETCH_DATA_START = \"FETCH_DATA_START\";\nexport const FETCH_DATA_SUCCESS = \"FETCH_DATA_SUCCESS\";\n\n// generic action type for any error\nexport const ERROR = \"ERROR\";\n\nexport const login = creds => dispatch => {\n  dispatch({ type: LOGIN_START });\n\n  return axios // we post login creds to login server\n    .post(`https://usemytechstuff.herokuapp.com/api/auth/login`, creds)\n    .then(res => {\n      // local storage stores token passed in\n      console.log('response.data is >> ', res.data);\n      //    localStorage.setItem(\"token\", res.data.payload);\n      localStorage.setItem('token', res.data.token);        // added\n      localStorage.setItem('user_id', res.data.user_id);    // added\n      localStorage.setItem('username', res.data.username);    // Just added , not showing up !!!\n      dispatch({type: LOGIN_RESOLVED, payload: res.data})\n    })\n    .catch(err => {\n      console.log(\"login err: \", err);\n      if (err.response.status === 403) {\n        localStorage.removeItem(\"token\");\n        //     localStorage.removeItem(\"user_id\");\n      }\n      //    dispatch({ type: LOGIN_RESOLVED });\n      dispatch({ type: ERROR });                       // JUST added\n    });\n};\n\nexport const getTech = () => dispatch => {\n  dispatch({ type: FETCH_DATA_START });\n  axios // NOTICE DIFFERENT ENDPOINT !!!!!\n    .get(`https://usemytechstuff.herokuapp.com/api/tech`,\n      { headers: { Authorization: localStorage.getItem(\"token\") } })\n    .then(res => {\n      console.log(\" >>>>this is res  \", res);\n      dispatch({\n        type: FETCH_DATA_SUCCESS,\n        payload: res.data\n      });\n    })\n    .catch(err => {\n      console.log(err.response);\n      if (err.response.status === 403) {\n        localStorage.removeItem(\"token\");\n      }\n      dispatch({ type: ERROR, payload: err.response });\n    });\n};\n"]},"metadata":{},"sourceType":"module"}